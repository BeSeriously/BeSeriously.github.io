<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[makefile简单介绍]]></title>
      <url>http://yoursite.com/2016/06/22/makefilesample/</url>
      <content type="html"><![CDATA[<p>最近在看《Linux程序设计》这本书，里面讲到makefile相关的知识，所以想写篇博客记录一下自己的学习情况。由于这本书里有关makefile的内容比较少，只是一些初级的知识，而且不够系统性，所以看到这篇博客的朋友如果想系统性地了解makefile的知识可以去查阅一些写得更好的博客，或者去查看make命令的手册。好了，下面开始介绍makefile。</p>
<p>经常在Windows下写程序的朋友可能用的比较多的是IDE，它不需要你去设置太多的东西就可以编译、链接自己写的代码，虽然在Linux下也有IDE可以使用，但有时候需要自己手动编译和链接文件，比如在bash里手动输入命令去编译.c文件，链接.o文件。在编写小程序时，许多人都会在编辑完源文件后重新编译所有文件来重建应用程序。但对大型程序来说，使用这种简单的处理方式会带来一些明显的问题：<font color="#ff0000">编辑——编译——测试</font> 这一循环周期变长，改动一小部分代码导致所有源文件重新编译是不可接受的。</p>
<p>比如说，你有3个头文件：<font color="#ff0000">a.h、b.h、c.h</font>，3个C源文件<font color="#ff0000">main.c、2.c、3.c</font>，具体情况如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* main.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"a.h"</span></span></span><br><span class="line">...  </span><br><span class="line"><span class="comment">/* 2.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"a.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"b.h"</span></span></span><br><span class="line">...  </span><br><span class="line"><span class="comment">/* 3.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"b.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"c.h"</span></span></span><br><span class="line">...  </span><br></pre></td></tr></table></figure><br>如果你修改了<font color="#ff0000">a.h</font>文件，<strong>make</strong>工具检测到<font color="#ff0000">main.c、2.c</font>包含了这个文件，在重新编译的时候就只会对<font color="#ff0000">main.c、2.c</font>进行重新编译，而不会重新编译<font color="#ff0000">3.c</font>这个文件，当项目中源文件多的时候可以减少很多重新编译的时间。当你写好<strong>makefile</strong>文件的时候，每次编译文件只需要输入<strong>make</strong>命令即可，省去了一条一条输入命令的时间，而且在需要修改命令的时候只需要对<strong>makefile</strong>文件的相应部分做出修改。  </p>
<p>一、<strong>make</strong>命令<br><strong>make</strong>程序本身有许多选项，其中最常用的3个选项如下：</p>
<ul>
<li><strong>-k</strong>：它的作用是让<strong>make</strong>命令在发现错误时仍然继续执行，而不是在遇到一个错误后就停止，这样可以一次性检查出所有未编译成功的源文件。</li>
<li><strong>-n</strong>：它的作用是让<strong>make</strong>命令输出将要执行的操作步骤，而不是真正执行这些操作。</li>
<li><strong>-f <filename></filename></strong>：它的作用是告诉<strong>make</strong>命令将哪个文件作为<strong>makefile</strong>文件。如果未使用这个选项，<strong>make</strong>命令默认将查找当前目录下名为<strong>makefile</strong>的文件，如果该文件不存在，它就会查找名为<strong>Makefile</strong>的文件。有些Linux发行版系统中，使用的可能是<strong>GNU Make</strong>，这个版本的<strong>make</strong>命令将优先查找<strong>GNUmakefile</strong>，然后才是<strong>makefile</strong>和<strong>Makefile</strong>。更多<strong>make</strong>命令请使用<code>$ man make</code>查阅。<a id="more"></a> 
二、<strong>makefile</strong>文件<br><strong>makefile</strong>文件的基本写法如下：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target: prerequisites  </span><br><span class="line">	command</span><br><span class="line">...</span><br></pre></td></tr></table></figure>  </li>
</ul>
<ol>
<li><strong>target</strong>：即目标文件，是你希望生成的文件，它可以是执行文件，也可以是链接文件<code>.o</code>，还可以是库文件<code>.a</code>，甚至是使用手册等。</li>
<li><strong>prerequisites</strong>：依赖项，是你生成<strong>target</strong>所需要的文件，它可以是头文件<code>.h</code>，源文件<code>.c</code>，链接文件<code>.o</code>，等。</li>
<li><strong>command</strong>：命令，即通过依赖项生成目标文件的方法。在<strong>makefile</strong>文件中必须以制表符tab开头，而不能用空格键，这算是一个历史遗留问题。<font color="#ff0000">此外，如果<strong>makefile</strong>文件中的某行以空格结尾，也可能导致<strong>make</strong>命令执行失败。</font></li>
</ol>
<p>下面是一个简单的<strong>makefile</strong>文件：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">myapp: main.o <span class="number">2.</span>o <span class="number">3.</span>o  </span><br><span class="line">    gcc -o myapp main.o <span class="number">2.</span>o <span class="number">3.</span>o</span><br><span class="line">main.o: main.c a.h  </span><br><span class="line">    gcc -c main.c  </span><br><span class="line"><span class="number">2.</span>o: <span class="number">2.</span>c a.h b.h  </span><br><span class="line">    gcc -c <span class="number">2.</span>c  </span><br><span class="line"><span class="number">3.</span>o: <span class="number">3.</span>c b.h c.h  </span><br><span class="line">    gcc -c <span class="number">3.</span>c  </span><br></pre></td></tr></table></figure><br>这个例子中有4个基本语句，拿第一个语句来解释，<code>myapp</code>是目标文件，<code>main.o 2.o 3.o</code>是依赖项，<code>gcc -o myapp main.o 2.o 3.o</code>是命令语句</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[无法登陆（在登陆界面输入密码后又跳转到登陆界面）]]></title>
      <url>http://yoursite.com/2016/06/12/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%97%A0%E6%B3%95%E7%99%BB%E9%99%86%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>今天在登陆Ubuntu虚拟机的时候，输入密码无法登陆，反复跳转到登陆界面。在网上查询解决办法的时候,发现是用户Home目录下一个叫“.Xauthority”的文件的拥有者和组都变成了root，导致无法登陆。所以只要将这个文件的拥有者和组改成登陆用户名就行了。具体的做法如下：  </p>
<ol>
<li>开机后在登陆界面按下shift + ctrl + F1进入tty1命令行终端，使用自己的用户名和密码登陆。</li>
<li>进入用户Home目录，然后修改文件拥有者和组。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~ </span><br><span class="line">$ sudo chown username:groupname .Xauthority</span><br></pre></td></tr></table></figure></li>
<li>使用shift + ctrl + F7切换到图形登陆界面，再输入密码登陆就行了。<br>具体原因请参考这篇文章<a href="http://www.2cto.com/os/201308/238991.html" target="_blank" rel="external">http://www.2cto.com/os/201308/238991.html</a></li>
</ol>
]]></content>
    </entry>
    
  
  
</search>
